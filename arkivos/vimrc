call plug#begin()
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'davidhalter/jedi-vim'

call plug#end()

" Global Sets
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on                   " Enable syntax highlight
set nu                      " Enable line numbers
set relativenumber
set tabstop=4               " Show existing tab with 4 spaces width
set softtabstop=4           " Show existing tab with 4 spaces width
set shiftwidth=4            " When indenting with '>', use 4 spaces width
set noexpandtab             " On pressing tab, insert real tab spaces
set smarttab                " insert tabs on the start of a line according to shiftwidth
set smartindent             " Automatically inserts one extra level of indentation in some cases
set hidden                  " Hides the current buffer when a new file is openned
set incsearch               " Incremental search
set ignorecase              " Ingore case in search
set smartcase               " Consider case if there is a upper case character
set scrolloff=8             " Minimum number of lines to keep above and below the cursor
set colorcolumn=81          " Draws a line at the given line to keep aware of the line size
set signcolumn=yes          " Add a column on the left. Useful for linting
set cmdheight=1             " Give more space for displaying messages
set updatetime=100          " Time in miliseconds to consider the changes
set encoding=utf-8          " The encoding should be utf-8 to activate the font icons
set termguicolors           " Colors 24 bits
set nobackup                " No backup files
set nowritebackup           " No backup files
set splitright              " Create the vertical splits to the right
set splitbelow              " Create the horizontal splits below
set autoread                " Update vim after file update from outside
set mouse=a                 " Enable mouse support
set history=500             " By default is 50
set cursorline              " Highlight on edit line
set laststatus=1            " Show information on status bar
set clipboard=unnamedplus   " Share clipboard with the system
filetype on                 " Detect and set the filetype option and trigger the FileType Event
filetype plugin on          " Load the plugin file for the file type, if any
filetype indent on          " Load the indent file for the file type, if any

set completeopt=menuone,noinsert,noselect  " Opções de completamento
set omnifunc=syntaxcomplete#Complete        " Função de completamento omni
set guifont=ComicShannsMono\ Nerd\ Font\ Mono:h12
set wildmenu                                " Ativa o menu de completamento
set wildmode=list:longest,full              " Modo de completamento



" Themes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"if exists('+termguicolors')
"  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"endif

colo jota

let g:NERDTreeHighlightCursorline = 0


" Terminal
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Mapeamento para abrir um terminal (yank nao funciona)
nnoremap <silent> <C-t> :botright terminal ++rows=9<CR>

if has('terminal')
  " Define as cores para o terminal
  let g:terminal_ansi_colors = [
    \ '#000000', '#FF0000', '#00FF00', '#FFFF00',
    \ '#3465A4', '#FF00FF', '#00FFFF', '#FFFFFF',
    \ '#808080', '#FF8080', '#80FF80', '#FFFF80',
    \ '#729FCF', '#FF80FF', '#80FFFF', '#FFFFFF'
    \ ]

  " Configura o shell para usar cores
  let &t_AB="\e[48;5;%dm"
  let &t_AF="\e[38;5;%dm"

  " Configura a aparência do terminal
  if exists('+winhighlight')
    autocmd TerminalOpen * setlocal winhighlight=Normal:Normal
  endif
  autocmd TerminalOpen * setlocal nonumber norelativenumber signcolumn=no
endif

if has('nvim')
  " Define as cores para o terminal
  let g:terminal_color_0 = '#000000'
  let g:terminal_color_1 = '#FF0000'
  let g:terminal_color_2 = '#00FF00'
  let g:terminal_color_3 = '#FFFF00'
  let g:terminal_color_4 = '#3465A4'  " Azul para o diretório
  let g:terminal_color_5 = '#FF00FF'
  let g:terminal_color_6 = '#00FFFF'
  let g:terminal_color_7 = '#FFFFFF'
  let g:terminal_color_8 = '#808080'
  let g:terminal_color_9 = '#FF8080'
  let g:terminal_color_10 = '#80FF80'
  let g:terminal_color_11 = '#FFFF80'
  let g:terminal_color_12 = '#729FCF'  " Azul claro
  let g:terminal_color_13 = '#FF80FF'
  let g:terminal_color_14 = '#80FFFF'
  let g:terminal_color_15 = '#FFFFFF'

  " Configura a aparência do terminal
  if exists('+winhighlight')
    autocmd TermOpen * setlocal winhighlight=Normal:Normal
  endif
  autocmd TermOpen * setlocal nonumber norelativenumber signcolumn=no
endif



" IdentLine
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:indentLine_enabled = 1 " activate by default 1
let g:indentLine_setColors = 0

set listchars=tab:\|.

map <C-k>l :set list<CR>
map <C-k>u :set nolist<CR>




" NerdTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set guifont=ComicShannsMono\ Nerd\ Font\ Mono:h12

" Ignorar arquivos .o e .out
let g:NERDTreeIgnore = ['\.o$', '\.out$']

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif

map <C-a> :NERDTreeToggle<CR>

" Shortcuts for split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l



" AirLine
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#formatter = 'jsformatter'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 0
let g:airline_statusline_ontop=0
let g:airline_theme='jota'

nnoremap <M-Right> :bn<CR>
nnoremap <M-Left> :bp<CR>
nnoremap <C-x> :bp \|bd #<CR>



" CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_custom_ignore = '\v[\/]\.(swp|zip|o)$'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_show_hidden = 1



" NerdCommenter
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDSpaceDelims = 2
let g:NERDDefaultAlign = 'left'
let g:NERDDefaultLiner = '/* %s */'
let g:NERDCompactSexyComs = 1
map cc <Plug>NERDCommenterInvert
map cs <Plug>NERDCommenterToggle



" Jedi
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jedi#popup_on_dot = 0
let g:jedi#show_call_signatures = 0
let g:jedi#environment_path = "venv"
let g:jedi#completions_enabled = 0



" Ale
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_enabled = 1
let g:ale_completion_enabled = 1

" Definir os linters para linguagens
let g:ale_linters = {
    \ 'c': ['gcc'],
    \ 'cpp': [],
    \ 'python': [],
    \ 'html': [],
    \ 'sh': ['shellcheck'],
    \ }

" Desativar correção automática
let g:ale_fix_on_save = 0
let g:ale_fixers = {'c': [], 'cpp': []}

" C/C++ (configuracao de formatacao)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source /home/jota/.config/nvim/forty_two.vim

" Python
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""




" Remap
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Adding an empty line below, above and below with insert
nmap op o<Esc>k
nmap oi O<Esc>j
nmap oo A<CR>

" Create a tab
nmap te :tabe<CR>

" Navigate between buffers
nmap tn :bn<CR>
nmap tp :bp<CR>

" Delete a buffer
nmap td :bd<CR>

" Create splits
nmap th :split<CR>
nmap tv :vsplit<CR>

" Close splits and others
nmap tt :q<CR>

" Call command shortcut
nmap tc :!

" run script
nnoremap tp :!python %<cr>



" Pessoais
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" buscar e substituir
" %s/palavra_antiga/palavra_nova/g



" Funcoes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! <SID>StdHeader()
    execute "normal! i/* ************************************************************************** */"
    execute "normal! o/*                                                                            */"
    execute "normal! o/*                                                        :::      ::::::::   */"
    execute "normal! o/*   ft_forty-two.c                                     :+:      :+:    :+:   */"
    execute "normal! o/*                                                    +:+ +:+         +:+     */"
    execute "normal! o/*   By: drown-ed <drown-ed@student.42.fr>          +#+  +:+       +#+        */"
    execute "normal! o/*                                                +#+#+#+#+#+   +#+           */"
    execute "normal! o/*   Created: 8888/88/88 88:88:88 by drown-ed          #+#    #+#             */"
    execute "normal! o/*   Updated: 8888/88/88 88:88:88 by drown-ed         ###   ########.SP       */"
    execute "normal! o/*                                                                            */"
    execute "normal! o/* ************************************************************************** */\n\n"
endfunction

" Mapeamento para adicionar um cabeçalho padrão ao pressionar F1
map <silent> <F1> :call <SID>StdHeader()<CR>
