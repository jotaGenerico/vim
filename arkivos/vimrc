function! <SID>StdHeader()
    execute "normal! i/* ************************************************************************** */"
    execute "normal! o/*                                                                            */"
    execute "normal! o/*                                                        :::      ::::::::   */"
    execute "normal! o/*   ft_forty-two.c                                     :+:      :+:    :+:   */"
    execute "normal! o/*                                                    +:+ +:+         +:+     */"
    execute "normal! o/*   By: drown-ed <drown-ed@student.42.fr>          +#+  +:+       +#+        */"
    execute "normal! o/*                                                +#+#+#+#+#+   +#+           */"
    execute "normal! o/*   Created: 8888/88/88 88:88:88 by drown-ed          #+#    #+#             */"
    execute "normal! o/*   Updated: 8888/88/88 88:88:88 by drown-ed         ###   ########.SP       */"
    execute "normal! o/*                                                                            */"
    execute "normal! o/* ************************************************************************** */\n\n"
endfunction

" Mapeamento para adicionar um cabeçalho padrão ao pressionar F1
map <silent> <F1> :call <SID>StdHeader()<CR>

" ativar sintaxe colorida
syntax on

" ativar indentação automática
set autoindent
filetype plugin indent on

" ativa indentação inteligente, o Vim tentará adivinhar
" qual é a melhor indentação para o código quando você
" efetuar quebra de linha. Funciona bem para linguagem C
set smartindent

" por padrão o vim armazena os últimos 50 comandos que você
" digitou em seu histórico. Eu sou exagerado, prefiro armazenar
" os últimos 500
set history=500

" ativar numeração de linha e linha relativa
set number
set relativenumber

" procura com highlight
set incsearch

" destaca a linha em que o cursor está posicionado
" ótimo para quem não enxerga muito bem
set cursorline

" ativa o clique do mouse para navegação pelos documentos
set mouse=a

" ativa o compartilhamento de área de transferência entre o Vim
" e a interface gráfica
set clipboard=unnamedplus

" ao teclar a barra de espaço no modo normal, o Vim
" irá colapsar ou expandir o bloco de código do cursor
" foldlevel é a partir de que nível de indentação o
" código iniciará colapsado
set foldmethod=syntax
set foldlevel=99
nnoremap <space> za

map <c-a> :NERDTreeToggle<cr>
set encoding=utf8
set guifont=ComicShannsMono\ Nerd\ Font\ Mono:h12

set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_statusline_ontop=0
let g:airline_theme='term'

colo jota

let g:airline#extensions#tabline#formatter = 'default'
" navegação entre os buffers
nnoremap <M-Right> :bn<cr>
nnoremap <M-Left> :bp<cr>
nnoremap <C-x> :bp\|bd #<cr>


let g:ctrlp_custom_ignore = '\v[\/]\.(swp|zip)$'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_show_hidden = 1


let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDDefaultLiner = '/* %s */'
let g:NERDCompactSexyComs = 1
map cc <Plug>NERDCommenterInvert

" Ativar o ALE para linting e formatação
let g:ale_enabled = 1

" Definir os linters para C e C++
let g:ale_linters = {'c': ['gcc'], 'cpp': ['g++']}
let g:ale_linters.python = ['pylint']
let g:ale_linters.sh = ['shellcheck']

" Desativar correção automática
let g:ale_fix_on_save = 0
let g:ale_fix_on_save = 0
let g:ale_fixers = {'c': [], 'cpp': []}

" Desativar sugestões e dicas automáticas
let g:ale_completion_enabled = 1

" comandos uteis para manter sempre por perto
" limpar todas as linhas em branco
" :g /^$/d

" reidentar todo o arquivo
" gg=G

" marcar a identaçao
" set list lcs=tab:\|.

" Atalho para abrir terminal na parte inferior horizontal
nnoremap <silent> <C-t> :botright terminal ++rows=9<CR>

" autocompletar padrao do vim
" Para usar o autocompletar para palavras já presentes no arquivo,
" você pode usar a combinação CTRL + N ou CTRL + P em modo de inserção.
" Isso irá sugerir palavras baseadas no conteúdo atual do arquivo.
" Para autocompletar funções e variáveis específicas da linguagem
" Você pode usar CTRL + X seguido de CTRL + O em modo de inserção.
" Isso ativará o "omni-completion" que é específico para cada linguagem.
filetype plugin on
set omnifunc=syntaxcomplete#Complete
set wildmenu
set wildmode=list:longest,full
set completeopt=longest,menuone

" buscar e substituir
" %s/palavra_antiga/palavra_nova/g

" confirma tabs ou espaços expandtab ou noexpandtab
set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
